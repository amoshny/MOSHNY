import javafx.scene.*;
import javafx.application.*;
import javafx.stage.*;
import javafx.scene.layout.*;
import javafx.scene.control.*;
import java.util.*;
import javafx.geometry.*;
import javafx.scene.paint.*;
import javafx.scene.image.*;
import javafx.event.*;
import javafx.scene.canvas.Canvas;
import javafx.animation.*;
import javafx.scene.canvas.GraphicsContext;

public class Project extends Application
{

   //making flowpanes
   BorderPane bp = new BorderPane();
   FlowPane center = new FlowPane();
   StackPane top = new StackPane();
   
   ArrayList<ProjectPane> ProjectPaneList = new ArrayList<ProjectPane>(); // initialize array list
   //boolean[] vis= new boolean[16];
   int ballsLeft = 15;
   int possibleMoves = 2;
   Label l1 = new Label("Balls left: "+ballsLeft+ " Possible moves: "+possibleMoves);
   Label win = new Label("You win");
   Label lose = new Label ("You lose");
   
   
   public void start(Stage stage)
   {
  
      center.setBackground(new Background(new BackgroundFill(Color.WHITE, 
      CornerRadii.EMPTY, Insets.EMPTY)));
      center.setPrefSize(300,300);
      //setting values of top flowpane
      FlowPane top = new FlowPane();
      top.setBackground(new Background(new BackgroundFill(Color.GRAY, 
      CornerRadii.EMPTY, Insets.EMPTY)));
      top.setPrefSize(50,50);
      top.getChildren().add(l1);
      //setting values of bottom flowpane   
      FlowPane bottom = new FlowPane();
      bottom.setBackground(new Background(new BackgroundFill(Color.GRAY, 
      CornerRadii.EMPTY, Insets.EMPTY)));   
      bottom.setPrefSize(50,50);
      //setting values of left flowpane
      FlowPane left = new FlowPane();
      left.setBackground(new Background(new BackgroundFill(Color.GRAY, 
      CornerRadii.EMPTY, Insets.EMPTY)));
      left.setPrefSize(49,50);
      //setting values of right flowpane      
      FlowPane right = new FlowPane();
      right.setBackground(new Background(new BackgroundFill(Color.GRAY, 
      CornerRadii.EMPTY, Insets.EMPTY)));
      right.setPrefSize(49,50);
      // adding elemnets to borderpamne
      bp.setRight(right);
      bp.setLeft(left);
      bp.setCenter(center);
      bp.setTop(top);
      bp.setBottom(bottom);      

      center.setVgap(0);
      center.setHgap(0.001);
  
   for(int i=0; i<16; i++)//making buttons
   {
      ProjectPaneList.add(new ProjectPane(i));
      ProjectPaneList.get(i).draw();
      center.getChildren().add(ProjectPaneList.get(i).paint());

   }
     
     ProjectPaneList.get(8).jumped();
     ProjectPaneList.get(8).newButtons();
     
     
      Scene scene = new Scene(bp, 600, 600);
      stage.setScene(scene);
      stage.setTitle("GAME!");
      stage.show();   
     
} 
   //when button is presed   
    public class ProjectPane extends GridPane
    {
      Canvas canvas = new Canvas(80,80);
      GridPane gp = new GridPane();
      GraphicsContext gc = canvas.getGraphicsContext2D();
      int paneNum = 0;
     
      Button bTop = new Button("T");
      Button bBottom = new Button("B");
      Button bRight = new Button("R");
      Button bLeft = new Button("L");
      
      public ProjectPane(int num)
      {
         gp.setVgap(0);
         gp.setHgap(0);
         paneNum = num;
      }
    
    public void draw()
    {
      gp.setPrefSize(100,100);
      
      bTop.setPrefSize(80,20);
      bBottom.setPrefSize(80,20);
      bRight.setPrefSize(20,80);
      bLeft.setPrefSize(20,80);
      
      gp.add(canvas,1,1);
      gp.add(bTop,1,0);
      gp.add(bBottom,1,2);
      gp.add(bLeft,0,1);
      gp.add(bRight,2,1);
      
      gc.fillOval(2,2,75,75);
      
      bTop.setOnAction(new ButtonListener(paneNum, 'T'));
      bBottom.setOnAction(new ButtonListener(paneNum, 'B'));
      bRight.setOnAction(new ButtonListener(paneNum, 'R'));
      bLeft.setOnAction(new ButtonListener(paneNum, 'L'));
      
      bLeft.setVisible(false);
      bRight.setVisible(false);
      bBottom.setVisible(false);
      bTop.setVisible(false);
      
    }
 
   public void setButtonVis(char b, boolean vis)
   {
      if (b=='T')
      {
         bTop.setVisible(vis);   
      }
      if (b=='B')
      {
         bBottom.setVisible(vis);   
      }
      if (b=='L')
      {
         bLeft.setVisible(vis);   
      }
      if (b=='R')
      {
         bRight.setVisible(vis);   
      }
   }
   
   public void jumped()
   {
      gp.setVisible(false);
   }
   
   public void newButtons()
   {
      for(int i = 0; i<=15; i++)
      {
      paneNum = i;
         if(paneNum%4==0||(paneNum-1)%4==0)
         {
            if(ProjectPaneList.get(paneNum+1).getVisStat()&&(!ProjectPaneList.get(paneNum+2).getVisStat()))
            {
               ProjectPaneList.get(paneNum).setButtonVis('L',true);   
            }
         }
         else if(paneNum%2==0||(paneNum-1)%2==0)
         {
            if(ProjectPaneList.get(paneNum-1).getVisStat()&&(!ProjectPaneList.get(paneNum-2).getVisStat()))
            {
               ProjectPaneList.get(paneNum).setButtonVis('R',true);   
            }
         }
         if(paneNum<=7)
         {
            if(ProjectPaneList.get(paneNum+4).getVisStat()&&(!ProjectPaneList.get(paneNum+8).getVisStat()))
            {
               ProjectPaneList.get(paneNum).setButtonVis('T',true);   
            }
         }
         if(paneNum>=8)
         {
            if(ProjectPaneList.get(paneNum-4).getVisStat()&&(!ProjectPaneList.get(paneNum-8).getVisStat()))
            {
               ProjectPaneList.get(paneNum).setButtonVis('B',true);   
            }
         }


      }
   }
    
    
   public void setNext(int currentPane)
   {
      gp.setVisible(true);
   }
   
   public boolean getVisStat()
   {
      return gp.isVisible();
   }
   
   public int getButtonsLeft()
   {
      int count = 0;
      if(gp.isVisible())
      {
         if(bTop.isVisible())
         count++;
         if(bBottom.isVisible())
         count++;
         if(bLeft.isVisible())
         count++;
         if(bRight.isVisible())
         count++;
      }
      return count;
      
   } 
   
   public GridPane paint()
   {
      return gp;
   }
      
 }     
     
   public class ButtonListener implements EventHandler<ActionEvent>
   {
      int paneNum = 0;
      char buttonLoc = ' ';
      public ButtonListener(int numIn, char buttonLocIn)
      {
         paneNum=numIn;
         buttonLoc=buttonLocIn;
      }
      
      public void handle( ActionEvent e) 
      {
        for(int i=0; i<16; i++)
        {
           ProjectPaneList.get(i).setButtonVis('T',false);
           ProjectPaneList.get(i).setButtonVis('B',false);
           ProjectPaneList.get(i).setButtonVis('L',false);
           ProjectPaneList.get(i).setButtonVis('R',false);
        }   
         
         if(buttonLoc=='B')
         {
            ProjectPaneList.get(paneNum).jumped();
            ProjectPaneList.get(paneNum-4).jumped();
            ProjectPaneList.get(paneNum-8).setNext(0);
            ProjectPaneList.get(paneNum).newButtons();
         }
         if(buttonLoc=='T')
         {
            ProjectPaneList.get(paneNum).jumped();
            ProjectPaneList.get(paneNum+4).jumped();
            ProjectPaneList.get(paneNum+8).setNext(0);
            ProjectPaneList.get(paneNum).newButtons();
         }
         if(buttonLoc=='R')
         {
            ProjectPaneList.get(paneNum).jumped();
            ProjectPaneList.get(paneNum-1).jumped();
            ProjectPaneList.get(paneNum-2).setNext(0);
            ProjectPaneList.get(paneNum).newButtons();
         }
         if(buttonLoc=='L')
         {
            ProjectPaneList.get(paneNum).jumped();
            ProjectPaneList.get(paneNum+1).jumped();
            ProjectPaneList.get(paneNum+2).setNext(0);
            ProjectPaneList.get(paneNum).newButtons();
         }
         
         int totalGone=0;
         int buttonsOn=0;
         for(int i=0;i<ProjectPaneList.size();i++)
         {
            if(!ProjectPaneList.get(i).getVisStat())
            {
               totalGone++;
            }
            buttonsOn+=ProjectPaneList.get(i).getButtonsLeft();
         }
         int f1 = 16-totalGone;
         int f2 = buttonsOn;
         Label l2 = new Label("Balls left: "+f2+" possible moves: "+f1);
         top.getChildren().clear();
         top.getChildren().add(l2);
         
         if(buttonsOn==0)
         {
            top.getChildren().clear();
            top.getChildren().add(lose);
         }
         
         if(totalGone>=15)
         {
            top.getChildren().clear();
            top.getChildren().add(win);
         }
      }
   }
}
